/*
========================================================================================
    cidgoh_qc  Nextflow config file
========================================================================================
    /*
     * Default config options for all compute environments
     * Cluster-specific config options should be saved
     * in the configuration folder and imported under a
     * profile name here.
     */
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // set up default params
    workDir= '/project/6007413/misc/tmp_work_nextflow'
    workDir = params.workDir

    // Input options
    input                        = null

    // Illumina QC, read trimming and filtering options
    kraken2_db                   = null
    kraken2_db_name              = 'bacteria'
    kraken2_variants_host_filter = false
    kraken2_assembly_host_filter = true
    save_trimmed_fail            = false
    skip_fastqc                  = false
    skip_kraken2                 = false
    skip_fastp                   = false
    skip_cutadapt                = false
    skip_multiqc                 = false
    multiqc_title                = null
    multiqc_config               = null

    // Config options
    custom_config_version        = 'master'
    custom_config_base           = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                    = [:]
    config_profile_name          = null
    config_profile_description   = null
    config_profile_contact       = null
    config_profile_url           = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                   = '128.GB'
    max_cpus                     = 16
    max_time                     = '240.h'
}

env {
  NXF_OPTS= '-Xms2g -Xmx4g'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'



profiles {
    conda {
    includeConfig 'conf/base.config'
	  includeConfig 'conf/conda.config'
    }
    docker {
		includeConfig 'conf/base.config'
		includeConfig 'conf/docker.config'
	}
	singularity {
    	includeConfig 'conf/base.config'
    	includeConfig 'conf/singularity.config'
    	includeConfig 'conf/singularity_containers.config'
    }
    slurm {
    	includeConfig 'conf/base.config'
    	includeConfig 'conf/singularity.config'
	includeConfig 'conf/singularity_containers.config'
    	includeConfig 'conf/slurm.config'
    }
 }




profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/base.config'
    	  includeConfig 'conf/conda.config'
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/base.config'
    		includeConfig 'conf/docker.config'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        includeConfig 'conf/base.config'
      	includeConfig 'conf/singularity.config'
      	includeConfig 'conf/singularity_containers.config'
    }
    slurm {
    	includeConfig 'conf/base.config'
    	includeConfig 'conf/singularity.config'
	    includeConfig 'conf/singularity_containers.config'
    	includeConfig 'conf/slurm.config'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}


manifest {
    name            = 'cidgoh_qc'
    author          = 'Zohaib Anwar, Jun Duan'
    homePage        = 'https://github.com/cidgoh'
    description     = 'CIDGOH_QC - Pipeline For QC check for NGS data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
